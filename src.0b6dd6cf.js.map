{"version":3,"sources":["getRefs.js","fetchCountries.js","index.js"],"names":["getRefs","searchBox","document","querySelector","countryList","countryInfo","BASE_URL","refs","getCountries","fetch","then","res","ok","json","Error","statusText","getCountryName","name","fetchCountriesData","setData","data","console","log","dataObject","countryData","countryName","countryOfficialName","official","countryCapital","capital","countryPopulation","population","countryLanguages","languages","countryFlags","flags","svg","countryLanguagesStr","Object","values","join","markup","insertAdjacentHTML","DEBOUNCE_DELAY","inputHandling","inputData","value","trim","textContent","addEventListener"],"mappings":";;;AAQA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EARO,MAAMA,EAAU,KACd,CACLC,UAAWC,SAASC,cAAc,eAClCC,YAAaF,SAASC,cAAc,iBACpCE,YAAaH,SAASC,cAAc,mBAIxC,QAAA,QAAA;;ACyIA,aAjJA,IAAA,EAAA,QAAA,aACA,MAAMG,EAAW,iCACXC,GAAO,EAAb,EAAA,WAGA,SAASC,IACPC,SAASH,SAAgBI,KAAKC,IACxBA,GAAAA,EAAIC,GACCD,OAAAA,EAAIE,OAEPC,MAAAA,MAAMH,EAAII,cAOpB,SAASC,EAAeC,GACfR,OAAAA,SAASH,UAAiBW,KAAQP,KAAKC,IACxCA,GAAAA,EAAIC,GACCD,OAAAA,EAAIE,OAEPC,MAAAA,MAAMH,EAAII,cAOpB,SAASG,EAAmBC,GAEnBV,OAAAA,gDADkDU,sDAEtDT,KAAKC,IACAA,GAAAA,EAAIC,GACCD,OAAAA,EAAIE,OAEPC,MAAAA,MAAMH,EAAII,cAEjBL,KAAKU,IACeC,QAAQC,OAAOF,GAA5BG,MACAC,EAAcJ,EAAK,GACnBK,EAAcD,EAAYP,KAAZ,OACdS,EAAsBF,EAAYP,KAAKU,SACvCC,EAAiBJ,EAAYK,QAAQ,GACrCC,EAAoBN,EAAYO,WAChCC,EAAmBR,EAAYS,UAC/BC,EAAeV,EAAYW,MAAMC,IAGhC,OAFPf,QAAQC,IAAIY,GAEL,CACLT,YAAAA,EACAC,oBAAAA,EACAE,eAAAA,EACAE,kBAAAA,EACAO,oBAN0BC,OAAOC,OAAOP,GAAkBQ,KAAK,MAO/DN,aAAAA,KAGHxB,KASO,IAPL,IAAA,YACCe,EADD,oBAECC,EAFD,eAGCE,EAHD,kBAICE,EAJD,oBAKCO,EALD,aAMCH,GACI,EACEO,MAAAA,qGAEiDP,oEAC1BT,8HAG6BC,oEACXE,yEACKE,uEACFO,4BAElD9B,EAAKF,YAAYqC,mBAAmB,YAAaD,KAjEzDjC,IAYAQ,EAAe,QA+EfE,EAAmB;;AC3FnB,aAdA,QAAA,oBACA,IAAA,EAAA,QAAA,aACA,EAAA,QAAA,oBACA,MAAMyB,EAAiB,IAEjBpC,GAAO,EAAb,EAAA,WAEA,SAASqC,IACHC,IAAAA,EAAYtC,EAAKN,UAAU6C,MAAMC,OAC7BxC,OAAAA,EAAKH,YAAY4C,YAAcH,EAKzCtC,EAAKN,UAAUgD,iBAAiB,QAASL","file":"src.0b6dd6cf.js","sourceRoot":"../src","sourcesContent":["export const getRefs = () => {\n  return {\n    searchBox: document.querySelector('#search-box'),\n    countryList: document.querySelector('.country-list'),\n    countryInfo: document.querySelector('.country-info'),\n  };\n};\n\n// console.log(getRefs());\n","import { getRefs } from './getRefs';\nconst BASE_URL = 'https://restcountries.com/v3.1';\nconst refs = getRefs();\n\n// =========== Получение с бекэнда всех стран - получаем массив объектов\nfunction getCountries() {\n  fetch(`${BASE_URL}/all`).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n    throw Error(res.statusText);\n  });\n}\n\ngetCountries();\n\n// =========== Получение с бекэнда данных одной строки в виде массива объектов всех значений\nfunction getCountryName(name) {\n  return fetch(`${BASE_URL}/name/${name}`).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n    throw Error(res.statusText);\n  });\n}\n\ngetCountryName('Peru');\n\n// =========== І способ. Получение с бекэнда данных одной строки в виде массива выбранных объектов\nfunction fetchCountriesData(setData) {\n  const PARAM_URL = `https://restcountries.com/v3.1/name/${setData}?fields=name,capital,population,flags,languages`;\n  return fetch(`${PARAM_URL}`)\n    .then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n      throw Error(res.statusText);\n    })\n    .then(data => {\n      const dataObject = console.log(...data);\n      const countryData = data[0];\n      const countryName = countryData.name['common'];\n      const countryOfficialName = countryData.name.official;\n      const countryCapital = countryData.capital[0];\n      const countryPopulation = countryData.population;\n      const countryLanguages = countryData.languages;\n      const countryFlags = countryData.flags.svg;\n      console.log(countryFlags);\n      const countryLanguagesStr = Object.values(countryLanguages).join(', ');\n      return {\n        countryName,\n        countryOfficialName,\n        countryCapital,\n        countryPopulation,\n        countryLanguagesStr,\n        countryFlags,\n      };\n    })\n    .then(\n      // =========== Создание разметки\n      ({\n        countryName,\n        countryOfficialName,\n        countryCapital,\n        countryPopulation,\n        countryLanguagesStr,\n        countryFlags,\n      }) => {\n        const markup = `\n        <div class=\"main-data\">\n          <img class=\"flag-icon\" width=\"60\" height=\"40\" src=\"${countryFlags}\" alt=\"country flag image\">\n          <h1 class=\"country-name\">${countryName}</h1>\n        </div>\n        <ul class=\"country-data\">\n            <li class=\"country-official-name\">Official name:<b> ${countryOfficialName}</b></li>\n            <li class=\"country-capital\">Capital: <b> ${countryCapital}</b></li>\n            <li class=\"country-population\">Population: <b>${countryPopulation}</b></li>\n            <li class=\"country-languages\">Languages: <b>${countryLanguagesStr}</b></li>\n        </ul>`;\n        refs.countryInfo.insertAdjacentHTML('beforeend', markup);\n      },\n    );\n\n  //   markup();\n\n  //   console.log(\n  //     countryName,\n  //     countryOfficialName,\n  //     countryCapital,\n  //     countryPopulation,\n  //     countryLanguages,\n  //   );\n\n  //   ;\n\n  //   console.log(countryData);\n  //   console.log(Object.keys(countryData).length);\n  //   console.log(countryName);\n  //   console.log(countryOfficialName);\n  //   console.log(countryCapital);\n\n  //   console.log(countryPopulation);\n  //   console.log(countryLanguagesStr);\n}\n\nfetchCountriesData('Peru');\n\n// console.log(markup());\n\n// function renderCountryData({\n//         countryName,\n//         countryOfficialName,\n//         countryCapital,\n//         countryPopulation,\n//         countryLanguages,\n// }) {\n//   `  <h1 class=\"country-name\">${countryName}</h1>\n//         <h2 class=\"country-official-name\">${countryOfficialName}</h2>\n//         <svg class=\"flag-icon\" width=\"20\" height=\"auto\">\n//             <use href=\"\"></use>\n//         </svg>\n//         <ul class=\"country-data\">\n//             <li class=\"country-capital\">Capital: ${countryCapital}</li>\n//             <li class=\"country-population\">Population: ${countryPopulation}</li>\n//             <li class=\"country-languages\">Languages: ${countryLanguages}</li>\n//         </ul>`;\n// }.join('');\n\n// +++++++++++ Пример из лекций\n// export function fetchCountries(name) {\n//   const countryUrl = `https://restcountries.com/v3.1/name/${name}`;\n//   fetch(countryUrl)\n//     .then(response => {\n//       if (!response.ok) {\n//         throw new Error(response.status);\n//       }\n//       return response.json();\n//     })\n//     .then(name => {\n//       console.log(name);\n//       // Data handling\n//     });\n//   //   .catch(error => {\n//   //     // Error handling\n//   //   });\n// }\n","import './css/styles.css';\nimport { getRefs } from './getRefs';\nimport { fetchCountries } from './fetchCountries';\nconst DEBOUNCE_DELAY = 300;\n\nconst refs = getRefs();\n\nfunction inputHandling() {\n  let inputData = refs.searchBox.value.trim();\n  return (refs.countryList.textContent = inputData);\n}\n\n// fetchCountries();\n\nrefs.searchBox.addEventListener('input', inputHandling);\n"]}